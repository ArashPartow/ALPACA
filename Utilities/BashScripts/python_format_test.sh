#!/bin/bash

autopep="autopep8"

# Applies python-format

# check that we are in a clean state in order to prevent accidental changes
if [ ! -z "$(git status --untracked-files=no  --porcelain)" ]; then
  echo "Script must be applied on a clean git state"
  exit 1
fi

echo
echo "Checking formatting using the following autopep8 version:"
$autopep --version
echo

# perform python-format on all py-files
find ./python -name '*.py' -exec $autopep --in-place --aggressive --max-line-length=160 {} \;
# check if something was modified
autopep_notcorrectlist=`git status --porcelain | grep '^ M' | cut -c4-`
pycodestyle_notcorrectlist=`pycodestyle  --max-line-length=160 ./python`
# if nothing changed ok
if [[ -z $autopep_notcorrectlist ]] && [[ -z ${pycodestyle_notcorrectlist} ]]; then
  # send a possitive message to gitlab
  echo "Excellent. Very good formatting!"
  exit 0;
else
  # Print all files that are not correct and how to manage those errors
  echo "The following files have pep8 format problems:"
  git diff --stat $autopep_notcorrectlist
  echo
  echo $pycodestyle_notcorrectlist
  echo
  echo "Please run"
  echo
  echo "find ./python -name '*.py' -exec autopep8 --in-place --aggressive --max-line-length=160 {} \;"
  echo
  echo "to solve the issue. Some problems (e.g. too long lines) have to be fixed manually."
  echo "A list of them containing the problem description can be generated by"
  echo
  echo "pycodestyle  --max-line-length=160 ./python"
  echo
  # cleanup changes in git
  git reset HEAD --hard
fi

exit 1
